package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"

	"github.com/piotrekmonko/portfello/pkg/auth"
	"github.com/piotrekmonko/portfello/pkg/graph/model"
)

// UserSetPassword is the resolver for the userSetPassword field.
func (r *mutationResolver) UserSetPassword(ctx context.Context, userID string, newPassword string) (*auth.User, error) {
	user, err := r.AuthService.GetUser(ctx, userID)
	if err != nil {
		return nil, fmt.Errorf("invalid user: %w", err)
	}

	err = r.AuthService.SetPassword(ctx, user, newPassword)
	if err != nil {
		return nil, fmt.Errorf("cannot change password: %w", err)
	}

	return user, nil
}

// UserCreate is the resolver for the userCreate field.
func (r *mutationResolver) UserCreate(ctx context.Context, newUser model.NewUser) (*auth.User, error) {
	return r.AuthService.CreateUser(ctx, newUser.Email, newUser.DisplayName, auth.Roles{auth.RoleUser})
}

// AdminCreate is the resolver for the adminCreate field.
func (r *mutationResolver) AdminCreate(ctx context.Context, newAdmin model.NewUser) (*auth.User, error) {
	return r.AuthService.CreateUser(ctx, newAdmin.Email, newAdmin.DisplayName, auth.Roles{auth.RoleSuperAdmin})
}

// UserAssignRoles is the resolver for the userAssignRoles field.
func (r *mutationResolver) UserAssignRoles(ctx context.Context, email string, newRoles []auth.RoleID) ([]auth.RoleID, error) {
	user := auth.GetCtxUser(ctx)
	if user == nil {
		return nil, auth.ErrNotAuthorized
	}
	userRoles := auth.Roles(user.Roles)
	requestedRoles := auth.Roles(newRoles)

	switch {
	case requestedRoles.Has(auth.RoleAdmin) && !userRoles.Has(auth.RoleSuperAdmin):
		return nil, fmt.Errorf("only super administrators may grant admin role")
	case requestedRoles.Has(auth.RoleSuperAdmin) && !userRoles.Has(auth.RoleSuperAdmin):
		return nil, fmt.Errorf("only super administrators may grant super admin role")
	}

	return r.AuthService.AssignRoles(ctx, email, newRoles)
}

// Login is the resolver for the login field.
func (r *queryResolver) Login(ctx context.Context, email string, pass string) (*string, error) {
	if email == "" || pass == "" {
		return nil, fmt.Errorf("user email and passwords are required")
	}

	user, err := r.AuthService.GetUser(ctx, email)
	if err != nil {
		return nil, fmt.Errorf("cannot login: %w", err)
	}

	err = r.AuthService.CheckPassword(ctx, user, pass)
	if err != nil {
		return nil, err
	}

	token, err := r.AuthService.IssueToken(ctx, user)
	if err != nil {
		return nil, err
	}

	return &token, nil
}

// GetUserRoles is the resolver for the getUserRoles field.
func (r *queryResolver) GetUserRoles(ctx context.Context, userID string) ([]auth.RoleID, error) {
	return r.AuthService.GetUserRoles(ctx, userID)
}

// ListUsers is the resolver for the listUsers field.
func (r *queryResolver) ListUsers(ctx context.Context) ([]*auth.User, error) {
	return r.AuthService.GetUsers(ctx)
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, email string) (*auth.User, error) {
	return r.AuthService.GetUser(ctx, email)
}
